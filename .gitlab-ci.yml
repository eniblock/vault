stages:
  - prepare
  - publish
  - test

services:
  - docker:dind

variables:
  CONTAINER_REF_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_SHA_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  CONTAINER_REF_SHA_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA

publish_docker:
  stage: publish
  image:
    name: tbxdev/build-docker
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - build_with_helm_tag $CI_REGISTRY_IMAGE ./helm/vault

publish_helm:
  stage: publish
  image: tbxdev/build-helm
  script:
    - helm registry login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - helm dependency build ./helm/vault
    - build $CI_REGISTRY_IMAGE/helm/vault ./helm/vault

k8s:
  stage: test
  image: tbxdev/build-helm
  services:
    - docker:dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_DRIVER: overlay2
    HELM_EXPERIMENTAL_OCI: "1"
  script:
    - k3d cluster create default --port 80:80@loadbalancer --port 443:443@loadbalancer
    - helm registry login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - kubectl create secret docker-registry gitlab-registry
      --docker-server=$CI_REGISTRY
      --docker-username=$CI_REGISTRY_USER
      --docker-password=$CI_REGISTRY_PASSWORD
    - image_tag=`yq eval .version helm/vault/Chart.yaml`-$CI_COMMIT_REF_SLUG.$CI_PIPELINE_IID
    # we can only test oci helm chart as dependencies, so just skip that for now
    # https://github.com/helm/helm/pull/9409
    - helm install vault ./helm/vault
      --set image.tag=${CI_COMMIT_TAG:-$image_tag}
      --set image.pullSecrets={gitlab-registry}
      --wait || (kubectl describe pod && false)
    - helm list
